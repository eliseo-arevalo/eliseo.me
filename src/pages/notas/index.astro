---
import Layout from '../../layouts/Layout.astro';
import SectionContainer from '../../components/SectionContainer.astro';
import { getCollection } from 'astro:content';
import ExcalPreview from '../../components/ExcalPreview.tsx';

// Parse sin normalizar (para URLs reales que acepta [...slug].astro)
function parseNameRaw(base: string){
    const m = base.split(/\s*-\s*|_/);
    const grupo = (m[0] || '').trim();
    const tema = (m.slice(1).join('-') || '').trim();
    return { grupo, tema };
}

function titleFromElements(data: any, fallback: string){
	try{
		const els = (data?.elements || []) as any[];
		const firstText = els.find(e => typeof e?.text === 'string' && e.text.trim().length);
		const t = String(firstText?.text || '').trim();
		if (t && t.length <= 100) return t;
	}catch {}
	return fallback;
}

function formatDate(ts: number){
    if (!ts || Number(ts) <= 0) return '';
    try{
        const d = new Date(ts);
        return d.toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: '2-digit' });
    }catch{ return ''; }
}

// handler ligero para marcar el preview clicado con un nombre de transición compartido

// MDX desde colección 'notas' (carpeta como grupo si existe)
const notes = await getCollection('notas');
const mdxItems = notes.map(p => {
	const slugPath = p.slug; // ya es relativo a la colección sin extensión
	const parts = slugPath.split('/');
	const name = parts[parts.length - 1];
	let group = 'general';
	let temaFrom = name;
	let segments: string[] = [];
	if (parts.length > 1) {
		group = parts[0];
		segments = parts; // /notas/<grupo>/<...>
	} else {
		const { grupo, tema } = parseNameRaw(name);
		group = grupo || 'general';
		segments = [grupo, tema].filter(Boolean) as string[];
	}
	const url = `/notas/${segments.join('/') || name}`;
	return {
		type: 'mdx' as const,
		group,
		slug: segments.join('/') || name,
		title: p.data.title || (segments.length > 1 ? parts.slice(1).join('-') : (temaFrom)),
		description: p.data.description || '',
		url,
		date: p.data.pubDate?.valueOf?.() ?? 0,
	};
});

// Excalidraw/JSON desde /src/content/notas/**
const jsonModules = import.meta.glob('/src/content/notas/**/*.json', { eager: true });
const excalModules = import.meta.glob('/src/content/notas/**/*.excalidraw', { eager: true, query: '?raw', import: 'default' });

function fileBase(path: string){
	const file = path.split('/').pop() || path;
	return file.replace(/\.(json|excalidraw)$/i,'');
}

const excalFromJson = Object.entries(jsonModules).map(([filePath, mod]) => {
	const rel = filePath.replace(/.*\/src\/content\/notas\//,'');
	const segs = rel.split('/');
	const fileBaseName = fileBase(segs[segs.length - 1]);
	const fromName = parseNameRaw(fileBaseName);
	const groupFolder = segs.length > 1 ? segs[0] : '';
	const group = groupFolder || fromName.grupo || 'general';
	const tema = fromName.tema || fileBaseName;
	const segments = groupFolder ? [group, tema].filter(Boolean) as string[] : [fromName.grupo, tema].filter(Boolean) as string[];
    const derived = (tema || fileBaseName).replace(/-/g, ' ');
	const data: any = (mod as any)?.default ?? (mod as any);
	const usedTitle = titleFromElements(data, derived);
	const desc = (data && typeof data.description === 'string' && data.description.trim().length)
		? data.description
		: `Diagrama: ${derived}`;
	const preview = JSON.stringify({ elements: data?.elements || [], appState: data?.appState || {}, files: data?.files || null });
	return {
		type: 'excalidraw' as const,
		group,
		slug: segments.join('/') || fileBaseName,
		title: usedTitle,
		description: desc,
		preview,
		url: `/notas/${segments.length ? segments.join('/') : fileBaseName}`,
		date: 0,
	};
});

const excalFromRaw = Object.entries(excalModules).map(([filePath, raw]) => {
	const rel = filePath.replace(/.*\/src\/content\/notas\//,'');
	const segs = rel.split('/');
	const fileBaseName = fileBase(segs[segs.length - 1]);
	const fromName = parseNameRaw(fileBaseName);
	const groupFolder = segs.length > 1 ? segs[0] : '';
	const group = groupFolder || fromName.grupo || 'general';
	const tema = fromName.tema || fileBaseName;
	const segments = groupFolder ? [group, tema].filter(Boolean) as string[] : [fromName.grupo, tema].filter(Boolean) as string[];
    const derived = (tema || fileBaseName).replace(/-/g, ' ');
	let data: any = {};
	try { data = JSON.parse(raw as string); } catch {}
	const usedTitle = titleFromElements(data, derived);
	const desc = (data && typeof data.description === 'string' && data.description.trim().length)
		? data.description
		: `Diagrama: ${derived}`;
	const preview = JSON.stringify({ elements: data?.elements || [], appState: data?.appState || {}, files: data?.files || null });
	return {
		type: 'excalidraw' as const,
		group,
		slug: segments.join('/') || fileBaseName,
		title: usedTitle,
		description: desc,
		preview,
		url: `/notas/${segments.length ? segments.join('/') : fileBaseName}`,
		date: 0,
	};
});

const excalItems = [...excalFromJson, ...excalFromRaw];

const itemsAll = [...mdxItems, ...excalItems].sort((a, b) => b.date - a.date);

// Agrupar por group (sin filtro de tipo)
const visible = itemsAll;

function canonicalGroup(s: string){
    return String(s || '')
        .normalize('NFD')
        .replace(/\p{Diacritic}+/gu, '')
        .toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/_/g, '-')
        .replace(/-+/g, '-')
        .trim();
}

const groupsMap = new Map<string, { display: string; items: any[] }>();
for (const item of visible) {
    const key = canonicalGroup(item.group);
    if (!groupsMap.has(key)) groupsMap.set(key, { display: item.group, items: [] });
    groupsMap.get(key)!.items.push(item);
}
type Item = {
  type: 'mdx' | 'excalidraw';
  group: string;
  slug: string;
  title: string;
  description: string;
  url: string;
  date: number;
  preview?: string;
};

const groups = Array.from(groupsMap.entries() as IterableIterator<[string, { display: string; items: Item[] }]>).sort((a,b) => a[0].localeCompare(b[0]));
const allGroupNames = groups.map(([key, { display }]) => display);
---

<Layout title="Notas | Eliseo Arévalo" description="MDX y Excalidraw bajo una sola ruta.">
    <SectionContainer class="mt-16" data-notes-root>
		<h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100">Notas</h1>
		<p class="mt-4 text-lg text-gray-600 dark:text-gray-400">
			Explora un poco mis notas e ideas 
		</p>

			

		<div class="mt-8 space-y-10" data-groups>
			{groups.map(([groupKey, entry]) => (
				<section data-group-section data-group={groupKey}>
					<div class="flex items-end gap-3">
						<h2 class="text-2xl font-semibold capitalize text-gray-900 dark:text-gray-100">{String(entry.display).replace(/-/g,' ')}</h2>
						<span class="text-xs text-gray-600 dark:text-gray-400">{entry.items.length} notas</span>
                        {entry.items.length > 3 && (
                            <a href={`/notas/grupo/${encodeURIComponent(String(groupKey))}`} class="ml-auto text-xs px-2 py-0.5 rounded-full border border-gray-300 dark:border-gray-700 hover:bg-black/5 dark:hover:bg-white/10">
                                Ver todas
                            </a>
                        )}
					</div>
					<ul class="mt-4 grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
						{entry.items.map(({ slug, title, url, type, description, preview, date }, idx) => (
						<li data-type={type} data-idx={idx} class={`${idx>=3?'hidden':''}`}>
                                <a href={url} class="group block rounded-xl overflow-hidden hover:bg-black/5 dark:hover:bg-white/5 transition focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-400/60">
                                    {/* Media superior (altura pequeña) */}
                    {type === 'excalidraw' && preview ? (
                        <div class="w-full overflow-hidden bg-gray-50 dark:bg-white/5" style={`view-transition-name: note-${String(slug).toLowerCase().replace(/[^a-z0-9_-]/g,'-')}`}>
                          <ExcalPreview client:only="react" data={preview} height={96} />
                        </div>
                    ) : (
                        <div class="w-full h-[96px] flex items-center justify-center bg-gray-100 dark:bg-white/5">
                          <span class="text-[10px] uppercase tracking-wide text-gray-600 dark:text-gray-300">MDX</span>
                        </div>
                    )}

                                    {/* Contenido vertical */}
                                    <div class="p-3 sm:p-4">
                                        <h3 class="text-base font-semibold text-gray-900 dark:text-gray-100 group-hover:text-sky-400 transition line-clamp-1">
                                            {title}
                                        </h3>
                                        {description && (
                                            <p class="mt-1 text-sm text-gray-700 dark:text-gray-300 line-clamp-2">{description}</p>
                                        )}
                                        <div class="mt-2 flex items-center gap-2 text-[10px] text-gray-600 dark:text-gray-400">
                                            {formatDate(date) && (
                                                <time datetime={new Date(date).toISOString()}>{formatDate(date)}</time>
                                            )}
                                            <span class="rounded-full px-2 py-0.5 border border-gray-300 dark:border-gray-700 opacity-80">{type}</span>
                                        </div>
                                    </div>
                                </a>
							</li>
						))}
					</ul>
				</section>
			))}
		</div>
    </SectionContainer>

		<script>
			// Toggle "Ver todas" por grupo
			document.addEventListener('click', (e) => {
				const btn = (e.target as Element).closest('button[data-group-toggle]') as HTMLButtonElement | null;
				if (!btn) return;
				const section = btn.closest('section[data-group-section]');
				if (!section) return;
				const items = Array.from(section.querySelectorAll('li[data-idx]')) as HTMLElement[];
				const isExpanded = btn.getAttribute('data-expanded') === 'true';
				const next = !isExpanded;
				btn.setAttribute('data-expanded', String(next));
				btn.setAttribute('aria-expanded', String(next));
				btn.textContent = next ? 'Ver menos' : 'Ver todas';
				for (const li of items) {
					const idx = Number(li.getAttribute('data-idx') || '0');
					if (idx >= 3) li.classList.toggle('hidden', !next);
				}
			});
		</script>
</Layout> 