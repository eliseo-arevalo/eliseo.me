---
import Layout from '../../layouts/Layout.astro';
import SectionContainer from '../../components/SectionContainer.astro';
import { getCollection } from 'astro:content';
import ExcalPreview from '../../components/ExcalPreview.tsx';

function parseName(base: string){
    // admite: "grupo_tema", "grupo - tema", "grupo-tema", o solo "tema"
    const name = base.replace(/\s+/g, '-');
    const m = name.split(/\s*-\s*|_/);
    const grupo = (m[0] || '').trim();
    const tema = (m.slice(1).join('-') || '').trim();
    return { grupo, tema };
}

function titleFromElements(data: any, fallback: string){
	try{
		const els = (data?.elements || []) as any[];
		const firstText = els.find(e => typeof e?.text === 'string' && e.text.trim().length);
		const t = String(firstText?.text || '').trim();
		if (t && t.length <= 100) return t;
	}catch {}
	return fallback;
}

// handler ligero para marcar el preview clicado con un nombre de transición compartido

// MDX desde colección 'notas'
const notes = await getCollection('notas');
const mdxItems = notes.map(p => {
	const parts = p.slug.split('/');
	const name = parts[parts.length - 1];
	const { grupo, tema } = parseName(name);
	const group = (grupo || 'general');
	const segments = [grupo, tema].filter(Boolean);
	const url = `/notas/${segments.length ? segments.join('/') : name}`;
	return {
		type: 'mdx' as const,
		group,
		slug: segments.join('/') || name,
		title: p.data.title || (tema || name),
		description: p.data.description || '',
		url,
		date: p.data.pubDate?.valueOf?.() ?? 0,
	};
});

// Excalidraw/JSON desde /src/content/notas/**
const jsonModules = import.meta.glob('/src/content/notas/**/*.json', { eager: true });
const excalModules = import.meta.glob('/src/content/notas/**/*.excalidraw', { eager: true, query: '?raw', import: 'default' });

function fileBase(path: string){
	const file = path.split('/').pop() || path;
	return file.replace(/\.(json|excalidraw)$/i,'');
}

const excalFromJson = Object.entries(jsonModules).map(([filePath, mod]) => {
	const base = fileBase(filePath);
	const { grupo, tema } = parseName(base);
	const group = (grupo || 'general');
	const segments = [grupo, tema].filter(Boolean);
	const derived = (tema || base).replace(/-/g, ' ');
	const data: any = (mod as any)?.default ?? (mod as any);
	const usedTitle = titleFromElements(data, derived);
	const desc = (data && typeof data.description === 'string' && data.description.trim().length)
		? data.description
		: `Diagrama: ${derived}`;
	const preview = JSON.stringify({ elements: data?.elements || [], appState: data?.appState || {}, files: data?.files || null });
	return {
		type: 'excalidraw' as const,
		group,
		slug: segments.join('/') || base,
		title: usedTitle,
		description: desc,
		preview,
		url: `/notas/${segments.length ? segments.join('/') : base}`,
		date: 0,
	};
});

const excalFromRaw = Object.entries(excalModules).map(([filePath, raw]) => {
	const base = fileBase(filePath);
	const { grupo, tema } = parseName(base);
	const group = (grupo || 'general');
	const segments = [grupo, tema].filter(Boolean);
	const derived = (tema || base).replace(/-/g, ' ');
	let data: any = {};
	try { data = JSON.parse(raw as string); } catch {}
	const usedTitle = titleFromElements(data, derived);
	const desc = (data && typeof data.description === 'string' && data.description.trim().length)
		? data.description
		: `Diagrama: ${derived}`;
	const preview = JSON.stringify({ elements: data?.elements || [], appState: data?.appState || {}, files: data?.files || null });
	return {
		type: 'excalidraw' as const,
		group,
		slug: segments.join('/') || base,
		title: usedTitle,
		description: desc,
		preview,
		url: `/notas/${segments.length ? segments.join('/') : base}`,
		date: 0,
	};
});

const excalItems = [...excalFromJson, ...excalFromRaw];

const itemsAll = [...mdxItems, ...excalItems].sort((a, b) => b.date - a.date);

// Agrupar por group (sin filtro de tipo)
const visible = itemsAll;

function canonicalGroup(s: string){
    return String(s || '')
        .toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/_/g, '-')
        .replace(/-+/g, '-')
        .trim();
}

const groupsMap = new Map<string, { display: string; items: any[] }>();
for (const item of visible) {
    const key = canonicalGroup(item.group);
    if (!groupsMap.has(key)) groupsMap.set(key, { display: item.group, items: [] });
    groupsMap.get(key)!.items.push(item);
}
type Item = {
  type: 'mdx' | 'excalidraw';
  group: string;
  slug: string;
  title: string;
  description: string;
  url: string;
  date: number;
  preview?: string;
};

const groups = Array.from(groupsMap.entries() as IterableIterator<[string, { display: string; items: Item[] }]>).sort((a,b) => a[0].localeCompare(b[0]));
const allGroupNames = groups.map(([key, { display }]) => display);
---

<Layout title="Notas | Eliseo Arévalo" description="MDX y Excalidraw bajo una sola ruta.">
    <SectionContainer class="mt-16" data-notes-root>
		<h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100">Notas</h1>
		<p class="mt-4 text-lg text-gray-600 dark:text-gray-400">
			Explora un poco mis notas e ideas 
		</p>

			

		<div class="mt-8 space-y-10" data-groups>
			{groups.map(([groupKey, entry]) => (
				<section data-group-section data-group={groupKey}>
					<div class="flex items-end gap-3">
						<h2 class="text-2xl font-semibold capitalize text-gray-900 dark:text-gray-100">{String(entry.display).replace(/-/g,' ')}</h2>
						<span class="text-xs text-gray-600 dark:text-gray-400">{entry.items.length} notas</span>
						{entry.items.length > 3 && (
							<a href={`/notas/grupo/${encodeURIComponent(String(groupKey))}`} class="ml-auto text-xs px-2 py-0.5 rounded-full border border-gray-300 dark:border-gray-700 hover:bg-black/5 dark:hover:bg-white/10">
                                Ver todas
                            </a>
                        )}
					</div>
					<ul class="mt-4 space-y-1">
						{entry.items.map(({ slug, title, url, type, description, preview }, idx) => (
						<li data-type={type} data-idx={idx} class={`${idx>=3?'hidden':''}`}>
								<a href={url} class="flex items-center gap-4 rounded-lg px-3 py-3 hover:bg-black/5 dark:hover:bg-white/5 transition">
									{/* Preview compacta para excalidraw */}
                    {type === 'excalidraw' && preview ? (
                                        <div class="w-20 sm:w-32 shrink-0 rounded-md overflow-hidden bg-gray-50 dark:bg-white/5" style={`view-transition-name: note-${String(slug).toLowerCase().replace(/[^a-z0-9_-]/g,'-')}`}>
                                            <ExcalPreview client:only="react" data={preview} height={72} />
                                        </div>
                                    ) : (
                                        <div class="flex w-12 h-12 shrink-0 items-center justify-center rounded-md bg-gray-100 dark:bg-white/5 text-xs uppercase text-gray-600 dark:text-gray-300">
											{type}
										</div>
									)}

									<div class="min-w-0">
										<h3 class="text-base text-sky-600 dark:text-sky-400 hover:underline capitalize truncate">
											{title}
											<span class="ml-2 align-middle text-[10px] rounded-full px-2 py-0.5 border border-gray-300 dark:border-gray-700 opacity-80">{type}</span>
										</h3>
										{description && (<p class="text-sm text-gray-700 dark:text-gray-300 mt-1 line-clamp-2">{description}</p>)}
									</div>
								</a>
							</li>
						))}
					</ul>
				</section>
			))}
		</div>
    </SectionContainer>

		<script>
			// Toggle "Ver todas" por grupo
			document.addEventListener('click', (e) => {
				const btn = (e.target as Element).closest('button[data-group-toggle]') as HTMLButtonElement | null;
				if (!btn) return;
				const section = btn.closest('section[data-group-section]');
				if (!section) return;
				const items = Array.from(section.querySelectorAll('li[data-idx]')) as HTMLElement[];
				const isExpanded = btn.getAttribute('data-expanded') === 'true';
				const next = !isExpanded;
				btn.setAttribute('data-expanded', String(next));
				btn.setAttribute('aria-expanded', String(next));
				btn.textContent = next ? 'Ver menos' : 'Ver todas';
				for (const li of items) {
					const idx = Number(li.getAttribute('data-idx') || '0');
					if (idx >= 3) li.classList.toggle('hidden', !next);
				}
			});
		</script>
</Layout> 