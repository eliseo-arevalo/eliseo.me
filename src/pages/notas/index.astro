---
import Layout from '../../layouts/Layout.astro';
import SectionContainer from '../../components/SectionContainer.astro';
import { getCollection } from 'astro:content';
import ExcalPreview from '../../components/ExcalPreview.tsx';

const type = (Astro.url.searchParams.get('type') ?? 'all').toLowerCase();
const groupQuery = (Astro.url.searchParams.get('group') ?? 'all').toLowerCase();

function parseName(base: string){
	// admite: "grupo_tema", "grupo - tema", "grupo-tema", o solo "tema"
	const m = base.split(/\s*-\s*|_/);
	const grupo = (m[0] || '').trim();
	const tema = (m.slice(1).join('-') || '').trim();
	return { grupo, tema };
}

function titleFromElements(data: any, fallback: string){
	try{
		const els = (data?.elements || []) as any[];
		const firstText = els.find(e => typeof e?.text === 'string' && e.text.trim().length);
		const t = String(firstText?.text || '').trim();
		if (t && t.length <= 100) return t;
	}catch {}
	return fallback;
}

// MDX desde colección 'notas'
const notes = await getCollection('notas');
const mdxItems = notes.map(p => {
	const parts = p.slug.split('/');
	const name = parts[parts.length - 1];
	const { grupo, tema } = parseName(name);
	const group = (grupo || 'general');
	const segments = [grupo, tema].filter(Boolean);
	const url = `/notas/${segments.length ? segments.join('/') : name}`;
	return {
		type: 'mdx' as const,
		group,
		slug: segments.join('/') || name,
		title: p.data.title || (tema || name),
		description: p.data.description || '',
		url,
		date: p.data.pubDate?.valueOf?.() ?? 0,
	};
});

// Excalidraw/JSON desde /src/content/notas/**
const jsonModules = import.meta.glob('/src/content/notas/**/*.json', { eager: true });
const excalModules = import.meta.glob('/src/content/notas/**/*.excalidraw', { eager: true, query: '?raw', import: 'default' });

function fileBase(path: string){
	const file = path.split('/').pop() || path;
	return file.replace(/\.(json|excalidraw)$/i,'');
}

const excalFromJson = Object.entries(jsonModules).map(([filePath, mod]) => {
	const base = fileBase(filePath);
	const { grupo, tema } = parseName(base);
	const group = (grupo || 'general');
	const segments = [grupo, tema].filter(Boolean);
	const derived = (tema || base).replace(/-/g, ' ');
	const data: any = (mod as any)?.default ?? (mod as any);
	const usedTitle = titleFromElements(data, derived);
	const desc = (data && typeof data.description === 'string' && data.description.trim().length)
		? data.description
		: `Diagrama: ${derived}`;
	const preview = JSON.stringify({ elements: data?.elements || [], appState: data?.appState || {}, files: data?.files || null });
	return {
		type: 'excalidraw' as const,
		group,
		slug: segments.join('/') || base,
		title: usedTitle,
		description: desc,
		preview,
		url: `/notas/${segments.length ? segments.join('/') : base}`,
		date: 0,
	};
});

const excalFromRaw = Object.entries(excalModules).map(([filePath, raw]) => {
	const base = fileBase(filePath);
	const { grupo, tema } = parseName(base);
	const group = (grupo || 'general');
	const segments = [grupo, tema].filter(Boolean);
	const derived = (tema || base).replace(/-/g, ' ');
	let data: any = {};
	try { data = JSON.parse(raw as string); } catch {}
	const usedTitle = titleFromElements(data, derived);
	const desc = (data && typeof data.description === 'string' && data.description.trim().length)
		? data.description
		: `Diagrama: ${derived}`;
	const preview = JSON.stringify({ elements: data?.elements || [], appState: data?.appState || {}, files: data?.files || null });
	return {
		type: 'excalidraw' as const,
		group,
		slug: segments.join('/') || base,
		title: usedTitle,
		description: desc,
		preview,
		url: `/notas/${segments.length ? segments.join('/') : base}`,
		date: 0,
	};
});

const excalItems = [...excalFromJson, ...excalFromRaw];

const itemsAll = [...mdxItems, ...excalItems].sort((a, b) => b.date - a.date);
const selectedType = type;

// Agrupar por group y aplicar filtro inicial por tipo (SSR)
const visible = itemsAll.filter(i => selectedType === 'all' || i.type === selectedType);
const groupsMap = new Map();
for (const item of visible) {
	if (!groupsMap.has(item.group)) groupsMap.set(item.group, []);
	groupsMap.get(item.group).push(item);
}
const groups = Array.from(groupsMap.entries()).sort((a,b) => a[0].localeCompare(b[0]));
const allGroupNames = groups.map(([g]) => g);
const selectedGroup = allGroupNames.includes(groupQuery) ? groupQuery : 'all';
---

<Layout title="Notas | Eliseo Arévalo" description="MDX y Excalidraw bajo una sola ruta.">
	<SectionContainer class="mt-16">
		<h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100">Notas</h1>
		<p class="mt-4 text-lg text-gray-600 dark:text-gray-400">
			Explora un poco mis notas e ideas 
		</p>

		<div class="mt-6 flex items-center gap-3 overflow-x-auto">
			<div class="ml-auto flex items-center gap-2 text-xs opacity-80">
				<span>Tipo:</span>
				<button data-filter-btn data-type="all" class={`px-2 py-0.5 rounded-full border border-gray-300 dark:border-gray-700 ${selectedType==='all'?'bg-sky-500 text-white':'hover:bg-black/5 dark:hover:bg-white/10'}`}>Todos</button>
				<button data-filter-btn data-type="mdx" class={`px-2 py-0.5 rounded-full border border-gray-300 dark:border-gray-700 ${selectedType==='mdx'?'bg-sky-500 text-white':'hover:bg-black/5 dark:hover:bg-white/10'}`}>MDX</button>
				<button data-filter-btn data-type="excalidraw" class={`px-2 py-0.5 rounded-full border border-gray-300 dark:border-gray-700 ${selectedType==='excalidraw'?'bg-sky-500 text-white':'hover:bg-black/5 dark:hover:bg-white/10'}`}>Excalidraw</button>
			</div>
		</div>

		<div class="mt-8 space-y-10" data-groups>
			{groups.map(([groupName, items]) => (
				<section data-group-section data-group={groupName}>
					<div class="flex items-end gap-3">
						<h2 class="text-2xl font-semibold capitalize text-gray-900 dark:text-gray-100">{groupName.replace(/-/g,' ')}</h2>
						<span class="text-xs text-gray-600 dark:text-gray-400">{items.length} notas</span>
						{items.length > 3 && (
							<button data-group-toggle class="ml-auto text-xs px-2 py-0.5 rounded-full border border-gray-300 dark:border-gray-700 hover:bg-black/5 dark:hover:bg-white/10">
								Ver todas
							</button>
						)}
					</div>
					<ul class="mt-4 grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
						{items.map(({ slug, title, url, type, description, preview }, idx) => (
							<li data-type={type} data-idx={idx} class={`rounded-lg border border-gray-200 dark:border-gray-800 p-0 hover:border-sky-400 transition overflow-hidden ${idx>=3?'hidden':''}`}>
								<a href={url} class="block">
									{type === 'excalidraw' && (
										<ExcalPreview client:only="react" data={preview} height={112} />
									)}
									<div class="p-4">
										<h3 class="text-base text-sky-600 dark:text-sky-400 hover:underline capitalize">
											{title}
											<span class="ml-2 text-[10px] rounded-full px-2 py-0.5 border border-gray-300 dark:border-gray-700 opacity-80">{type}</span>
										</h3>
										{description && (<p class="text-sm text-gray-700 dark:text-gray-300 mt-1 line-clamp-2">{description}</p>)}
									</div>
								</a>
							</li>
						))}
					</ul>
				</section>
			))}
		</div>
	</SectionContainer>
</Layout> 