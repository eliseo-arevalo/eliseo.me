---
import type { GetStaticPaths } from 'astro';
import Layout from '../../layouts/Layout.astro';
import SectionContainer from '../../components/SectionContainer.astro';
import ExcalidrawArticle from '../../components/ExcalidrawArticle.tsx';
import { getCollection } from 'astro:content';

interface ExcalidrawArticleData {
  elements: readonly any[];
  appState?: any;
  files?: Record<string, any>;
}

export const getStaticPaths: GetStaticPaths = async () => {
  // Utilidades
  const parseName = (fileName: string) => {
    const base = fileName.replace(/\.(md|mdx|excalidraw|json)$/i,'');
    const m = base.split(/\s*-\s*|_/);
    const grupo = (m[0] || '').trim();
    const tema = (m.slice(1).join('-') || '').trim();
    return { grupo, tema };
  };

  // MDX en colecciÃ³n notas: usar el slug completo (incluye carpeta si existe)
  const posts = await getCollection('notas');
  const mdxPaths = posts.map(post => ({ params: { slug: post.slug }, props: { kind: 'mdx' as const, post } }));

  // Excalidraw/JSON en /src/content/notas/**
  const jsonModules = import.meta.glob('/src/content/notas/**/*.json', { eager: true }) as Record<string, { default: ExcalidrawArticleData } | ExcalidrawArticleData>;
  const excalModules = import.meta.glob('/src/content/notas/**/*.excalidraw', { eager: true, query: '?raw', import: 'default' }) as Record<string, string>;

  function relFrom(path: string){
    return path.replace(/.*\/src\/content\/notas\//,'');
  }
  function fileBase(path: string){
    const f = path.split('/').pop() || path;
    return f.replace(/\.(json|excalidraw)$/i,'');
  }

  const excalPaths: { params: { slug: string }; props: { kind: 'excal'; articleData: ExcalidrawArticleData } }[] = [];

  for (const [filePath, mod] of Object.entries(jsonModules)) {
    const rel = relFrom(filePath);
    const segs = rel.split('/');
    const base = fileBase(rel);
    const fromName = parseName(base);
    const groupFolder = segs.length > 1 ? segs[0] : '';
    const grupo = groupFolder || fromName.grupo;
    const tema = fromName.tema || base;
    const slug = [grupo, tema].filter(Boolean).join('/');
    const articleData = (mod as any).default ?? mod;
    excalPaths.push({ params: { slug }, props: { kind: 'excal', articleData } });
  }

  for (const [filePath, raw] of Object.entries(excalModules)) {
    const rel = relFrom(filePath);
    const segs = rel.split('/');
    const base = fileBase(rel);
    const fromName = parseName(base);
    const groupFolder = segs.length > 1 ? segs[0] : '';
    const grupo = groupFolder || fromName.grupo;
    const tema = fromName.tema || base;
    const slug = [grupo, tema].filter(Boolean).join('/');
    const articleData = JSON.parse(raw) as ExcalidrawArticleData;
    excalPaths.push({ params: { slug }, props: { kind: 'excal', articleData } });
  }

  return [...mdxPaths, ...excalPaths];
};

const { kind } = Astro.props as { kind: 'mdx' | 'excal' };

let title: string = 'Nota';
let description: string = 'Nota';
let pubDate: Date | undefined;
let Content: any;
let articleData: ExcalidrawArticleData | undefined;

if (kind === 'mdx') {
  const { post } = Astro.props as any;
  const rendered = await post.render();
  Content = rendered.Content;
  title = post.data.title || title;
  description = post.data.description || description;
  pubDate = post.data.pubDate;
} else {
  ({ articleData } = Astro.props as { articleData: ExcalidrawArticleData });
}
---

<Layout title={`Nota | ${title}`} description={description}>
  {kind === 'mdx' ? (
    <SectionContainer class="mt-16">
      <article class="prose dark:prose-invert lg:prose-lg">
        <h1>{title}</h1>
        {pubDate && (
          <div class="text-gray-500 mb-8">
            <time datetime={pubDate.toISOString()}>
              {pubDate.toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' })}
            </time>
          </div>
        )}
        <Content />
      </article>
    </SectionContainer>
  ) : (
    <SectionContainer class="mt-16">
      <article>
        {articleData && (
          <div style={`view-transition-name: note-${String((Astro as any).params?.slug || '').toLowerCase().replace(/[^a-z0-9_-]/g,'-')}`}>
            <ExcalidrawArticle client:only="react" articleData={articleData} />
          </div>
        )}
      </article>
    </SectionContainer>
  )}
</Layout>
